<%+header%>

<div class="cbi-map">
    <h2 name="content"><%:Network Switcher Overview%></h2>
    
    <div class="cbi-map-descr">
        <%:Real-time status and control of network interface switching.%>
    </div>
    
    <fieldset class="cbi-section">
        <legend><%:Service Control%></legend>
        <div id="service-control">
            <div class="cbi-value">
                <label class="cbi-value-title"><%:Service Status%></label>
                <div class="cbi-value-field">
                    <span id="service-status">-</span>
                    <button class="cbi-button cbi-button-apply" onclick="serviceControl('start')" id="start-btn" style="margin-left: 10px;">
                        <%:Start%>
                    </button>
                    <button class="cbi-button cbi-button-reset" onclick="serviceControl('stop')" id="stop-btn" style="margin-left: 5px;">
                        <%:Stop%>
                    </button>
                    <button class="cbi-button cbi-button-reload" onclick="serviceControl('restart')" id="restart-btn" style="margin-left: 5px;">
                        <%:Restart%>
                    </button>
                </div>
            </div>
            
            <div class="cbi-value">
                <label class="cbi-value-title"><%:Operation Mode%></label>
                <div class="cbi-value-field">
                    <span id="operation-mode">-</span>
                </div>
            </div>
            
            <div class="cbi-value">
                <label class="cbi-value-title"><%:Current Interface%></label>
                <div class="cbi-value-field">
                    <span id="current-interface">-</span>
                </div>
            </div>
        </div>
    </fieldset>
    
    <fieldset class="cbi-section">
        <legend><%:Quick Actions%></legend>
        <div class="cbi-value">
            <div class="cbi-value-field">
                <button class="cbi-button cbi-button-reload" onclick="refreshStatus()">
                    <%:Refresh Status%>
                </button>
                <button class="cbi-button cbi-button-positive" onclick="runTest()">
                    <%:Test Connectivity%>
                </button>
                <button class="cbi-button cbi-button-action" onclick="switchInterface('auto')">
                    <%:Auto Switch%>
                </button>
            </div>
        </div>
        
        <div class="cbi-value">
            <label class="cbi-value-title"><%:Manual Switch%></label>
            <div class="cbi-value-field" id="interface-buttons">
                <!-- 接口按钮将通过JavaScript动态生成 -->
            </div>
        </div>
    </fieldset>
    
    <fieldset class="cbi-section">
        <legend><%:Operation Result%></legend>
        <pre id="operation-result" style="min-height: 120px; background: #f5f5f5; padding: 10px; border-radius: 3px; font-family: monospace; white-space: pre-wrap; font-size: 12px;"></pre>
    </fieldset>
    
    <fieldset class="cbi-section">
        <legend><%:Detailed Status%></legend>
        <pre id="status-output" style="min-height: 300px; background: #f5f5f5; padding: 10px; border-radius: 3px; font-family: monospace; white-space: pre-wrap; font-size: 12px;"></pre>
    </fieldset>
</div>

<script>
// 页面加载时获取状态
window.onload = function() {
    refreshStatus();
};

function refreshStatus() {
    showOperationResult("正在刷新状态...");
    
    var xhr = new XMLHttpRequest();
    xhr.open('GET', '<%=luci.dispatcher.build_url("admin/services/network_switcher/status")%>', true);
    xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
            if (xhr.status === 200) {
                var response = JSON.parse(xhr.responseText);
                
                // 更新服务状态
                updateServiceStatus(response.service, response.config.enabled);
                
                // 更新操作模式
                document.getElementById('operation-mode').textContent = 
                    response.config.operation_mode === 'auto' ? '自动模式' : '手动模式';
                
                // 从状态输出中提取当前接口
                var statusText = response.status_output;
                var currentInterfaceMatch = statusText.match(/当前默认出口:\s*(\S+)/);
                if (currentInterfaceMatch) {
                    document.getElementById('current-interface').textContent = currentInterfaceMatch[1];
                }
                
                // 生成接口切换按钮
                generateInterfaceButtons(statusText);
                
                // 更新详细状态输出
                document.getElementById('status-output').textContent = statusText;
                showOperationResult("状态刷新完成");
            } else {
                showOperationResult("状态刷新失败: " + xhr.status);
            }
        }
    };
    xhr.send();
}

function updateServiceStatus(serviceStatus, configEnabled) {
    var statusElement = document.getElementById('service-status');
    var startBtn = document.getElementById('start-btn');
    var stopBtn = document.getElementById('stop-btn');
    var restartBtn = document.getElementById('restart-btn');
    
    if (serviceStatus === 'running') {
        statusElement.innerHTML = '<span style="color: green">● <%:Running%></span>';
        startBtn.disabled = true;
        stopBtn.disabled = false;
        restartBtn.disabled = false;
    } else {
        statusElement.innerHTML = '<span style="color: red">● <%:Stopped%></span>';
        startBtn.disabled = false;
        stopBtn.disabled = true;
        restartBtn.disabled = true;
    }
    
    // 如果配置未启用，显示警告
    if (configEnabled === '0') {
        statusElement.innerHTML += ' <span style="color: orange">(<%:Disabled in config%>)</span>';
    }
}

function generateInterfaceButtons(statusText) {
    var buttonsContainer = document.getElementById('interface-buttons');
    buttonsContainer.innerHTML = '';
    
    // 从状态文本中提取接口名称
    var interfaceRegex = /--- (\w+) \(优先级:/g;
    var match;
    var interfaces = [];
    
    while ((match = interfaceRegex.exec(statusText)) !== null) {
        interfaces.push(match[1]);
    }
    
    // 为每个接口生成按钮
    interfaces.forEach(function(iface) {
        var button = document.createElement('button');
        button.className = 'cbi-button cbi-button-action';
        button.style.marginRight = '5px';
        button.textContent = '切换到 ' + iface;
        button.onclick = function() { switchInterface(iface); };
        buttonsContainer.appendChild(button);
    });
}

function serviceControl(action) {
    showOperationResult("正在执行服务操作: " + action + "...");
    
    var xhr = new XMLHttpRequest();
    xhr.open('GET', '<%=luci.dispatcher.build_url("admin/services/network_switcher/service_control")%>?action=' + action, true);
    xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
            if (xhr.status === 200) {
                var response = JSON.parse(xhr.responseText);
                showOperationResult(response.message);
                // 操作完成后刷新状态
                setTimeout(refreshStatus, 2000);
            } else {
                showOperationResult("服务操作失败: " + xhr.status);
            }
        }
    };
    xhr.send();
}

function runTest() {
    showOperationResult("正在测试网络连通性...");
    
    var xhr = new XMLHttpRequest();
    xhr.open('GET', '<%=luci.dispatcher.build_url("admin/services/network_switcher/test")%>', true);
    xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
            if (xhr.status === 200) {
                var response = JSON.parse(xhr.responseText);
                showOperationResult(response.output);
                // 测试完成后刷新状态
                setTimeout(refreshStatus, 1000);
            } else {
                showOperationResult("测试执行失败: " + xhr.status);
            }
        }
    };
    xhr.send();
}

function switchInterface(interface) {
    if (interface === 'auto') {
        if (!confirm('<%:Are you sure you want to run auto switch?%>')) {
            return;
        }
    } else {
        if (!confirm('<%:Are you sure you want to switch to%> ' + interface + '?')) {
            return;
        }
    }
    
    showOperationResult("正在切换到 " + interface + "...");
    
    var xhr = new XMLHttpRequest();
    xhr.open('GET', '<%=luci.dispatcher.build_url("admin/services/network_switcher/switch")%>?interface=' + interface, true);
    xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
            if (xhr.status === 200) {
                var response = JSON.parse(xhr.responseText);
                showOperationResult(response.message);
                // 切换完成后刷新状态
                setTimeout(refreshStatus, 2000);
            } else {
                showOperationResult("切换操作失败: " + xhr.status);
            }
        }
    };
    xhr.send();
}

function showOperationResult(message) {
    var resultElement = document.getElementById('operation-result');
    resultElement.textContent = message;
    resultElement.scrollTop = resultElement.scrollHeight;
}

// 每30秒自动刷新状态
setInterval(refreshStatus, 30000);
</script>

<%+footer%>
